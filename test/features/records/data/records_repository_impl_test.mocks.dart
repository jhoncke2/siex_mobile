// Mocks generated by Mockito 5.2.0 from annotations
// in siex/test/features/records/data/records_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:siex/core/external/user_extra_info_getter.dart' as _i5;
import 'package:siex/features/records/data/records_remote_data_source.dart'
    as _i2;
import 'package:siex/features/records/domain/entities/record.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [RecordsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecordsRemoteDataSource extends _i1.Mock
    implements _i2.RecordsRemoteDataSource {
  MockRecordsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Record>> getNewRecords(String? accessToken) =>
      (super.noSuchMethod(Invocation.method(#getNewRecords, [accessToken]),
              returnValue: Future<List<_i4.Record>>.value(<_i4.Record>[]))
          as _i3.Future<List<_i4.Record>>);
  @override
  _i3.Future<List<_i4.Record>> getOldRecords(String? accessToken) =>
      (super.noSuchMethod(Invocation.method(#getOldRecords, [accessToken]),
              returnValue: Future<List<_i4.Record>>.value(<_i4.Record>[]))
          as _i3.Future<List<_i4.Record>>);
  @override
  _i3.Future<void> updateRecords(
          List<_i4.Record>? records, String? accessToken) =>
      (super.noSuchMethod(
          Invocation.method(#updateRecords, [records, accessToken]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
}

/// A class which mocks [UserExtraInfoGetter].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserExtraInfoGetter extends _i1.Mock
    implements _i5.UserExtraInfoGetter {
  MockUserExtraInfoGetter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> getAccessToken() =>
      (super.noSuchMethod(Invocation.method(#getAccessToken, []),
          returnValue: Future<String>.value('')) as _i3.Future<String>);
  @override
  _i3.Future<int> getId() => (super.noSuchMethod(Invocation.method(#getId, []),
      returnValue: Future<int>.value(0)) as _i3.Future<int>);
}
