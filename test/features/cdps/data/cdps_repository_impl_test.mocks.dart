// Mocks generated by Mockito 5.2.0 from annotations
// in siex/test/features/cdps/data/cdps_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:io' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:siex/core/external/user_extra_info_getter.dart' as _i7;
import 'package:siex/features/cdps/data/cdps_remote_data_source.dart' as _i4;
import 'package:siex/features/cdps/domain/entities/cdp.dart' as _i6;
import 'package:siex/features/cdps/domain/entities/cdps_group.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeCdpsGroup_0 extends _i1.Fake implements _i2.CdpsGroup {}

class _FakeFile_1 extends _i1.Fake implements _i3.File {}

/// A class which mocks [CdpsRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCdpsRemoteDataSource extends _i1.Mock
    implements _i4.CdpsRemoteDataSource {
  MockCdpsRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.Cdp>> getNewCdps(String? accessToken) =>
      (super.noSuchMethod(Invocation.method(#getNewCdps, [accessToken]),
              returnValue: Future<List<_i6.Cdp>>.value(<_i6.Cdp>[]))
          as _i5.Future<List<_i6.Cdp>>);
  @override
  _i5.Future<void> updateCdps(List<_i6.Cdp>? cdps, String? accessToken) =>
      (super.noSuchMethod(Invocation.method(#updateCdps, [cdps, accessToken]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<List<_i6.Cdp>> getOldCdps(String? accessToken) =>
      (super.noSuchMethod(Invocation.method(#getOldCdps, [accessToken]),
              returnValue: Future<List<_i6.Cdp>>.value(<_i6.Cdp>[]))
          as _i5.Future<List<_i6.Cdp>>);
  @override
  _i5.Future<_i2.CdpsGroup> getCdps(String? accessToken) =>
      (super.noSuchMethod(Invocation.method(#getCdps, [accessToken]),
              returnValue: Future<_i2.CdpsGroup>.value(_FakeCdpsGroup_0()))
          as _i5.Future<_i2.CdpsGroup>);
  @override
  _i5.Future<_i3.File> getFeaturePdf(_i6.Cdp? feature, String? accessToken) =>
      (super.noSuchMethod(
              Invocation.method(#getFeaturePdf, [feature, accessToken]),
              returnValue: Future<_i3.File>.value(_FakeFile_1()))
          as _i5.Future<_i3.File>);
}

/// A class which mocks [UserExtraInfoGetter].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserExtraInfoGetter extends _i1.Mock
    implements _i7.UserExtraInfoGetter {
  MockUserExtraInfoGetter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<String> getAccessToken() =>
      (super.noSuchMethod(Invocation.method(#getAccessToken, []),
          returnValue: Future<String>.value('')) as _i5.Future<String>);
  @override
  _i5.Future<int> getId() => (super.noSuchMethod(Invocation.method(#getId, []),
      returnValue: Future<int>.value(0)) as _i5.Future<int>);
}
