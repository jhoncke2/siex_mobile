// Mocks generated by Mockito 5.2.0 from annotations
// in siex/test/features/budgets/presentation/cdps_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:siex/features/cdps/domain/cdps_failures.dart' as _i5;
import 'package:siex/features/cdps/domain/entities/cdps_group.dart' as _i6;
import 'package:siex/features/cdps/domain/entities/feature.dart' as _i8;
import 'package:siex/features/cdps/presentation/use_cases/get_cdps.dart' as _i3;
import 'package:siex/features/cdps/presentation/use_cases/update_cdps.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [GetCdps].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCdps extends _i1.Mock implements _i3.GetCdps {
  MockGetCdps() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CdpsFailure, _i6.CdpsGroup>> call() =>
      (super.noSuchMethod(Invocation.method(#call, []),
          returnValue: Future<_i2.Either<_i5.CdpsFailure, _i6.CdpsGroup>>.value(
              _FakeEither_0<_i5.CdpsFailure, _i6.CdpsGroup>())) as _i4
          .Future<_i2.Either<_i5.CdpsFailure, _i6.CdpsGroup>>);
}

/// A class which mocks [UpdateCdps].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateCdps extends _i1.Mock implements _i7.UpdateCdps {
  MockUpdateCdps() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CdpsFailure, void>> call(List<_i8.Feature>? cdps) =>
      (super.noSuchMethod(Invocation.method(#call, [cdps]),
              returnValue: Future<_i2.Either<_i5.CdpsFailure, void>>.value(
                  _FakeEither_0<_i5.CdpsFailure, void>()))
          as _i4.Future<_i2.Either<_i5.CdpsFailure, void>>);
}
